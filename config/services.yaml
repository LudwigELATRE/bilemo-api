# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    App\Provider\Product\ProductProvider:
        arguments:
            $productRepository: '@App\Repository\ProductRepository'
            $requestStack: '@request_stack'

    App\Provider\Product\ProductCollectionProvider:
        arguments:
            $productRepository: '@App\Repository\ProductRepository'
            $requestStack: '@request_stack'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\EnterpriseListener:
        # This configuration registers the EnterpriseListener as a Doctrine event listener.
        # The listener will execute specific methods before the entity is persisted (prePersist) or updated (preUpdate) in the database.
        # prePersist: This event is triggered before a new entity is persisted (saved) in the database.
        # preUpdate: This event is triggered before an existing entity is updated in the database.
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    App\EventListener\UserListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.view', method: 'onUserPost', priority: 100 }